#!/usr/bin/env bash

set -euo pipefail

basedir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )"

get_repository_arn() {
  local repository_name="${1}"
  local region="${2}"

  repository_arn=$(aws ecr describe-repositories --repository-names "${repository_name}" --region "${region}" | jq '.repositories[0].repositoryArn' -r)
}

ecr_exists() {
  local repository_name="${1}"
  local region="${2}"

  aws ecr describe-repositories \
    --repository-names "${repository_name}" \
    --region "$region" \
    --output text \
    --query 'repositories[0].registryId'
}

upsert_ecr() { 
  local repository_name="${1}"
  local region="${2}"

  if ! ecr_exists "${repository_name}" "${region}"; then
    echo '--- Creating ECR repository'
    echo "Name: ${repository_name}"
    aws ecr create-repository --repository-name "${repository_name}" --region $region
  fi

  repository_policy_file="${BUILDKITE_PLUGIN_CREATE_ECR_REPOSITORY_POLICY:-}"
  if [[ ${repository_policy_file} != '' ]]; then
    echo '--- Setting ECR repository policy'
    echo "File: ${repository_policy_file}"
    aws ecr set-repository-policy \
      --repository-name "${repository_name}" \
      --region "$region" \
      --policy-text "file://${repository_policy_file}"
  fi

  lifecycle_policy_file="${BUILDKITE_PLUGIN_CREATE_ECR_LIFECYCLE_POLICY:-"${basedir}/policies/default-lifecycle-policy.json"}"
  echo '--- Setting ECR lifecycle policy'
  echo "File: ${lifecycle_policy_file}"
  aws ecr put-lifecycle-policy \
  --repository-name "${repository_name}" \
  --region "$region" \
  --lifecycle-policy-text "file://${lifecycle_policy_file}"

  repository_tags_file="${BUILDKITE_PLUGIN_CREATE_ECR_REPOSITORY_TAGS_FILE:-}"
  if [[ ${repository_tags_file} != '' ]]; then
    echo '--- Setting ECR repository tags'
    echo "File: ${repository_tags_file}"
    echo '--- Getting ECR repository Arn'
    get_repository_arn "${repository_name}" "${region}"
    echo "Repository Arn: ${repository_arn}"
    aws ecr tag-resource \        
      --resource-arn "${repository_arn}" \
      --region "$region" \
      --tags "file://${repository_tags_file}"
  fi

  if [[ "${BUILDKITE_PLUGIN_CREATE_ECR_SCAN_ON_PUSH:-}" =~ ^(true|on|1)$ ]]; then
    echo '--- Setting ECR image scanning configuration as enabled'
    aws ecr put-image-scanning-configuration \
      --repository-name "${repository_name}" \
      --region "$region" \
      --image-scanning-configuration \
      scanOnPush=true
  elif [[ "${BUILDKITE_PLUGIN_CREATE_ECR_SCAN_ON_PUSH:-}" =~ ^(false|off|0)$ ]]; then
    echo '--- Setting ECR image scanning configuration as disabled'
    aws ecr put-image-scanning-configuration \
      --repository-name "${repository_name}" \
      --region "$region" \
      --image-scanning-configuration \
      scanOnPush=false
  fi
}

get_current_region() {
  fallback_region=$(aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]')
}

upsert_to_regional_ecr() {
  local repository_name="${1}"
  local regions="${2}"

  if [ -z "$regions"]
  then
    echo "--- No regions mentioned. Getting current region from"
    get_current_region
    echo "-- Current region : ${fallback_region}"
    upsert_ecr "${repository_name}" "${fallback_region}"
  else
    # run a loop for each region mentioned in the list
    for region in $(echo "$regions" | sed -e 's/;/\n/g' | sed -e 's/ //' | awk NF); do
      echo "--- Current region ${region}"
      upsert_ecr "${repository_name}" "${region}"
    done
  fi
}

if [[ -z ${BUILDKITE_PLUGIN_CREATE_ECR_NAME:-} ]]; then
  echo "'name' property is required"
  exit 1
fi

repository_name="${BUILDKITE_PLUGIN_CREATE_ECR_NAME}"
regions="${BUILDKITE_PLUGIN_CREATE_ECR_REGIONS-}"
upsert_to_regional_ecr "${repository_name}" "${regions}"
